Current program state: id#1
Execution stack: 
v=2; print(v);
Int v

Symbol table: 

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#1
Execution stack: 
v=2; print(v);

Symbol table: 
v -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#1
Execution stack: 
print(v)
v=2

Symbol table: 
v -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#1
Execution stack: 
print(v)

Symbol table: 
v -> 2

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#1
Execution stack: 

Symbol table: 
v -> 2

Output: 
2

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#2
Execution stack: 
Int b; a=2+3*5; b=a+1; print(b);
Int a

Symbol table: 

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#2
Execution stack: 
Int b; a=2+3*5; b=a+1; print(b);

Symbol table: 
a -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#2
Execution stack: 
a=2+3*5; b=a+1; print(b);
Int b

Symbol table: 
a -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#2
Execution stack: 
a=2+3*5; b=a+1; print(b);

Symbol table: 
a -> 0
b -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#2
Execution stack: 
b=a+1; print(b);
a=2+3*5

Symbol table: 
a -> 0
b -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#2
Execution stack: 
b=a+1; print(b);

Symbol table: 
a -> 17
b -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#2
Execution stack: 
print(b)
b=a+1

Symbol table: 
a -> 17
b -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#2
Execution stack: 
print(b)

Symbol table: 
a -> 17
b -> 18

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#2
Execution stack: 

Symbol table: 
a -> 17
b -> 18

Output: 
18

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#3
Execution stack: 
Int v; a=true; If(a) then{ v=2 } else{ v=3 }; print(v);
Boolean a

Symbol table: 

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#3
Execution stack: 
Int v; a=true; If(a) then{ v=2 } else{ v=3 }; print(v);

Symbol table: 
a -> false

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#3
Execution stack: 
a=true; If(a) then{ v=2 } else{ v=3 }; print(v);
Int v

Symbol table: 
a -> false

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#3
Execution stack: 
a=true; If(a) then{ v=2 } else{ v=3 }; print(v);

Symbol table: 
a -> false
v -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#3
Execution stack: 
If(a) then{ v=2 } else{ v=3 }; print(v);
a=true

Symbol table: 
a -> false
v -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#3
Execution stack: 
If(a) then{ v=2 } else{ v=3 }; print(v);

Symbol table: 
a -> true
v -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#3
Execution stack: 
print(v)
If(a) then{ v=2 } else{ v=3 }

Symbol table: 
a -> true
v -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#3
Execution stack: 
print(v)
v=2

Symbol table: 
a -> true
v -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#3
Execution stack: 
print(v)

Symbol table: 
a -> true
v -> 2

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#3
Execution stack: 

Symbol table: 
a -> true
v -> 2

Output: 
2

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#4
Execution stack: 
varf=src/main/java/test.in; openRFile(varf); Int varc; readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf);
String varf

Symbol table: 

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#4
Execution stack: 
varf=src/main/java/test.in; openRFile(varf); Int varc; readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf);

Symbol table: 
varf -> 

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#4
Execution stack: 
openRFile(varf); Int varc; readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf);
varf=src/main/java/test.in

Symbol table: 
varf -> 

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#4
Execution stack: 
openRFile(varf); Int varc; readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf);

Symbol table: 
varf -> src/main/java/test.in

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#4
Execution stack: 
Int varc; readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf);
openRFile(varf)

Symbol table: 
varf -> src/main/java/test.in

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#4
Execution stack: 
Int varc; readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf);

Symbol table: 
varf -> src/main/java/test.in

Output: 

File table: 
src/main/java/test.in -> java.io.BufferedReader@2e17b264

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#4
Execution stack: 
readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf);
Int varc

Symbol table: 
varf -> src/main/java/test.in

Output: 

File table: 
src/main/java/test.in -> java.io.BufferedReader@2e17b264

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#4
Execution stack: 
readFile(varf); print(varc); readFile(varf); print(varc); closeFile(varf);

Symbol table: 
varf -> src/main/java/test.in
varc -> 0

Output: 

File table: 
src/main/java/test.in -> java.io.BufferedReader@2e17b264

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#4
Execution stack: 
print(varc); readFile(varf); print(varc); closeFile(varf);
readFile(varf)

Symbol table: 
varf -> src/main/java/test.in
varc -> 0

Output: 

File table: 
src/main/java/test.in -> java.io.BufferedReader@2e17b264

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#4
Execution stack: 
print(varc); readFile(varf); print(varc); closeFile(varf);

Symbol table: 
varf -> src/main/java/test.in
varc -> 15

Output: 

File table: 
src/main/java/test.in -> java.io.BufferedReader@2e17b264

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#4
Execution stack: 
readFile(varf); print(varc); closeFile(varf);
print(varc)

Symbol table: 
varf -> src/main/java/test.in
varc -> 15

Output: 

File table: 
src/main/java/test.in -> java.io.BufferedReader@2e17b264

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#4
Execution stack: 
readFile(varf); print(varc); closeFile(varf);

Symbol table: 
varf -> src/main/java/test.in
varc -> 15

Output: 
15

File table: 
src/main/java/test.in -> java.io.BufferedReader@2e17b264

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#4
Execution stack: 
print(varc); closeFile(varf);
readFile(varf)

Symbol table: 
varf -> src/main/java/test.in
varc -> 15

Output: 
15

File table: 
src/main/java/test.in -> java.io.BufferedReader@2e17b264

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#4
Execution stack: 
print(varc); closeFile(varf);

Symbol table: 
varf -> src/main/java/test.in
varc -> 50

Output: 
15

File table: 
src/main/java/test.in -> java.io.BufferedReader@2e17b264

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#4
Execution stack: 
closeFile(varf)
print(varc)

Symbol table: 
varf -> src/main/java/test.in
varc -> 50

Output: 
15

File table: 
src/main/java/test.in -> java.io.BufferedReader@2e17b264

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#4
Execution stack: 
closeFile(varf)

Symbol table: 
varf -> src/main/java/test.in
varc -> 50

Output: 
15
50

File table: 
src/main/java/test.in -> java.io.BufferedReader@2e17b264

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#4
Execution stack: 

Symbol table: 
varf -> src/main/java/test.in
varc -> 50

Output: 
15
50

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#5
Execution stack: 
new(v, 20); Ref(0, Ref(0, Int)) a; new(a, v); print(v); print(a);
Ref(0, Int) v

Symbol table: 

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#5
Execution stack: 
new(v, 20); Ref(0, Ref(0, Int)) a; new(a, v); print(v); print(a);

Symbol table: 
v -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#5
Execution stack: 
Ref(0, Ref(0, Int)) a; new(a, v); print(v); print(a);
new(v, 20)

Symbol table: 
v -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#5
Execution stack: 
Ref(0, Ref(0, Int)) a; new(a, v); print(v); print(a);

Symbol table: 
v -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#5
Execution stack: 
new(a, v); print(v); print(a);
Ref(0, Ref(0, Int)) a

Symbol table: 
v -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#5
Execution stack: 
new(a, v); print(v); print(a);

Symbol table: 
a -> Ref(0, Int)->0
v -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#5
Execution stack: 
print(v); print(a);
new(a, v)

Symbol table: 
a -> Ref(0, Int)->0
v -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#5
Execution stack: 
print(v); print(a);

Symbol table: 
a -> Ref(0, Int)->2
v -> Int->1

Output: 

File table: 

Heap: 
1 -> 20
2 -> Int->1

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#5
Execution stack: 
print(a)
print(v)

Symbol table: 
a -> Ref(0, Int)->2
v -> Int->1

Output: 

File table: 

Heap: 
1 -> 20
2 -> Int->1

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#5
Execution stack: 
print(a)

Symbol table: 
a -> Ref(0, Int)->2
v -> Int->1

Output: 
Int->1

File table: 

Heap: 
1 -> 20
2 -> Int->1

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#5
Execution stack: 

Symbol table: 
a -> Ref(0, Int)->2
v -> Int->1

Output: 
Int->1
Ref(0, Int)->2

File table: 

Heap: 
1 -> 20
2 -> Int->1

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#6
Execution stack: 
new(v, 20); Ref(0, Ref(0, Int)) a; new(a, v); print(rH(v)); print(5+rH(rH(a)));
Ref(0, Int) v

Symbol table: 

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#6
Execution stack: 
new(v, 20); Ref(0, Ref(0, Int)) a; new(a, v); print(rH(v)); print(5+rH(rH(a)));

Symbol table: 
v -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#6
Execution stack: 
Ref(0, Ref(0, Int)) a; new(a, v); print(rH(v)); print(5+rH(rH(a)));
new(v, 20)

Symbol table: 
v -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#6
Execution stack: 
Ref(0, Ref(0, Int)) a; new(a, v); print(rH(v)); print(5+rH(rH(a)));

Symbol table: 
v -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#6
Execution stack: 
new(a, v); print(rH(v)); print(5+rH(rH(a)));
Ref(0, Ref(0, Int)) a

Symbol table: 
v -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#6
Execution stack: 
new(a, v); print(rH(v)); print(5+rH(rH(a)));

Symbol table: 
a -> Ref(0, Int)->0
v -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#6
Execution stack: 
print(rH(v)); print(5+rH(rH(a)));
new(a, v)

Symbol table: 
a -> Ref(0, Int)->0
v -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#6
Execution stack: 
print(rH(v)); print(5+rH(rH(a)));

Symbol table: 
a -> Ref(0, Int)->2
v -> Int->1

Output: 

File table: 

Heap: 
1 -> 20
2 -> Int->1

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#6
Execution stack: 
print(5+rH(rH(a)))
print(rH(v))

Symbol table: 
a -> Ref(0, Int)->2
v -> Int->1

Output: 

File table: 

Heap: 
1 -> 20
2 -> Int->1

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#6
Execution stack: 
print(5+rH(rH(a)))

Symbol table: 
a -> Ref(0, Int)->2
v -> Int->1

Output: 
20

File table: 

Heap: 
1 -> 20
2 -> Int->1

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#6
Execution stack: 

Symbol table: 
a -> Ref(0, Int)->2
v -> Int->1

Output: 
20
25

File table: 

Heap: 
1 -> 20
2 -> Int->1

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#7
Execution stack: 
new(v, 20); print(rH(v)); wH(v,30); print(5+rH(v));
Ref(0, Int) v

Symbol table: 

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#7
Execution stack: 
new(v, 20); print(rH(v)); wH(v,30); print(5+rH(v));

Symbol table: 
v -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#7
Execution stack: 
print(rH(v)); wH(v,30); print(5+rH(v));
new(v, 20)

Symbol table: 
v -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#7
Execution stack: 
print(rH(v)); wH(v,30); print(5+rH(v));

Symbol table: 
v -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#7
Execution stack: 
wH(v,30); print(5+rH(v));
print(rH(v))

Symbol table: 
v -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#7
Execution stack: 
wH(v,30); print(5+rH(v));

Symbol table: 
v -> Int->1

Output: 
20

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#7
Execution stack: 
print(5+rH(v))
wH(v,30)

Symbol table: 
v -> Int->1

Output: 
20

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#7
Execution stack: 
print(5+rH(v))

Symbol table: 
v -> Int->1

Output: 
20

File table: 

Heap: 
1 -> 30

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#7
Execution stack: 

Symbol table: 
v -> Int->1

Output: 
20
35

File table: 

Heap: 
1 -> 30

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#8
Execution stack: 
v=4; while(v > 0)
{ print(v); v=v-1; }; print(v);
Int v

Symbol table: 

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#8
Execution stack: 
v=4; while(v > 0)
{ print(v); v=v-1; }; print(v);

Symbol table: 
v -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#8
Execution stack: 
while(v > 0)
{ print(v); v=v-1; }; print(v);
v=4

Symbol table: 
v -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#8
Execution stack: 
while(v > 0)
{ print(v); v=v-1; }; print(v);

Symbol table: 
v -> 4

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#8
Execution stack: 
print(v)
while(v > 0)
{ print(v); v=v-1; }

Symbol table: 
v -> 4

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#8
Execution stack: 
print(v)
while(v > 0)
{ print(v); v=v-1; }
print(v); v=v-1;

Symbol table: 
v -> 4

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#8
Execution stack: 
print(v)
while(v > 0)
{ print(v); v=v-1; }
v=v-1
print(v)

Symbol table: 
v -> 4

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#8
Execution stack: 
print(v)
while(v > 0)
{ print(v); v=v-1; }
v=v-1

Symbol table: 
v -> 4

Output: 
4

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#8
Execution stack: 
print(v)
while(v > 0)
{ print(v); v=v-1; }

Symbol table: 
v -> 3

Output: 
4

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#8
Execution stack: 
print(v)
while(v > 0)
{ print(v); v=v-1; }
print(v); v=v-1;

Symbol table: 
v -> 3

Output: 
4

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#8
Execution stack: 
print(v)
while(v > 0)
{ print(v); v=v-1; }
v=v-1
print(v)

Symbol table: 
v -> 3

Output: 
4

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#8
Execution stack: 
print(v)
while(v > 0)
{ print(v); v=v-1; }
v=v-1

Symbol table: 
v -> 3

Output: 
4
3

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#8
Execution stack: 
print(v)
while(v > 0)
{ print(v); v=v-1; }

Symbol table: 
v -> 2

Output: 
4
3

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#8
Execution stack: 
print(v)
while(v > 0)
{ print(v); v=v-1; }
print(v); v=v-1;

Symbol table: 
v -> 2

Output: 
4
3

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#8
Execution stack: 
print(v)
while(v > 0)
{ print(v); v=v-1; }
v=v-1
print(v)

Symbol table: 
v -> 2

Output: 
4
3

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#8
Execution stack: 
print(v)
while(v > 0)
{ print(v); v=v-1; }
v=v-1

Symbol table: 
v -> 2

Output: 
4
3
2

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#8
Execution stack: 
print(v)
while(v > 0)
{ print(v); v=v-1; }

Symbol table: 
v -> 1

Output: 
4
3
2

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#8
Execution stack: 
print(v)
while(v > 0)
{ print(v); v=v-1; }
print(v); v=v-1;

Symbol table: 
v -> 1

Output: 
4
3
2

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#8
Execution stack: 
print(v)
while(v > 0)
{ print(v); v=v-1; }
v=v-1
print(v)

Symbol table: 
v -> 1

Output: 
4
3
2

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#8
Execution stack: 
print(v)
while(v > 0)
{ print(v); v=v-1; }
v=v-1

Symbol table: 
v -> 1

Output: 
4
3
2
1

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#8
Execution stack: 
print(v)
while(v > 0)
{ print(v); v=v-1; }

Symbol table: 
v -> 0

Output: 
4
3
2
1

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#8
Execution stack: 
print(v)

Symbol table: 
v -> 0

Output: 
4
3
2
1

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#8
Execution stack: 

Symbol table: 
v -> 0

Output: 
4
3
2
1
0

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#9
Execution stack: 
new(v, 20); Ref(0, Ref(0, Int)) a; new(a, v); new(v, 30); print(rH(rH(a)));
Ref(0, Int) v

Symbol table: 

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#9
Execution stack: 
new(v, 20); Ref(0, Ref(0, Int)) a; new(a, v); new(v, 30); print(rH(rH(a)));

Symbol table: 
v -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#9
Execution stack: 
Ref(0, Ref(0, Int)) a; new(a, v); new(v, 30); print(rH(rH(a)));
new(v, 20)

Symbol table: 
v -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#9
Execution stack: 
Ref(0, Ref(0, Int)) a; new(a, v); new(v, 30); print(rH(rH(a)));

Symbol table: 
v -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#9
Execution stack: 
new(a, v); new(v, 30); print(rH(rH(a)));
Ref(0, Ref(0, Int)) a

Symbol table: 
v -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#9
Execution stack: 
new(a, v); new(v, 30); print(rH(rH(a)));

Symbol table: 
a -> Ref(0, Int)->0
v -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#9
Execution stack: 
new(v, 30); print(rH(rH(a)));
new(a, v)

Symbol table: 
a -> Ref(0, Int)->0
v -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#9
Execution stack: 
new(v, 30); print(rH(rH(a)));

Symbol table: 
a -> Ref(0, Int)->2
v -> Int->1

Output: 

File table: 

Heap: 
1 -> 20
2 -> Int->1

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#9
Execution stack: 
print(rH(rH(a)))
new(v, 30)

Symbol table: 
a -> Ref(0, Int)->2
v -> Int->1

Output: 

File table: 

Heap: 
1 -> 20
2 -> Int->1

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#9
Execution stack: 
print(rH(rH(a)))

Symbol table: 
a -> Ref(0, Int)->2
v -> Int->3

Output: 

File table: 

Heap: 
1 -> 20
2 -> Int->3
3 -> 30

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#9
Execution stack: 

Symbol table: 
a -> Ref(0, Int)->2
v -> Int->3

Output: 
30

File table: 

Heap: 
1 -> 20
2 -> Int->3
3 -> 30

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#10
Execution stack: 
new(v, 20); Ref(0, Ref(0, Int)) a; new(a, v); new(v, 30); new(v, 60); print(rH(rH(a)));
Ref(0, Int) v

Symbol table: 

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#10
Execution stack: 
new(v, 20); Ref(0, Ref(0, Int)) a; new(a, v); new(v, 30); new(v, 60); print(rH(rH(a)));

Symbol table: 
v -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#10
Execution stack: 
Ref(0, Ref(0, Int)) a; new(a, v); new(v, 30); new(v, 60); print(rH(rH(a)));
new(v, 20)

Symbol table: 
v -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#10
Execution stack: 
Ref(0, Ref(0, Int)) a; new(a, v); new(v, 30); new(v, 60); print(rH(rH(a)));

Symbol table: 
v -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#10
Execution stack: 
new(a, v); new(v, 30); new(v, 60); print(rH(rH(a)));
Ref(0, Ref(0, Int)) a

Symbol table: 
v -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#10
Execution stack: 
new(a, v); new(v, 30); new(v, 60); print(rH(rH(a)));

Symbol table: 
a -> Ref(0, Int)->0
v -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#10
Execution stack: 
new(v, 30); new(v, 60); print(rH(rH(a)));
new(a, v)

Symbol table: 
a -> Ref(0, Int)->0
v -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#10
Execution stack: 
new(v, 30); new(v, 60); print(rH(rH(a)));

Symbol table: 
a -> Ref(0, Int)->2
v -> Int->1

Output: 

File table: 

Heap: 
1 -> 20
2 -> Int->1

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#10
Execution stack: 
new(v, 60); print(rH(rH(a)));
new(v, 30)

Symbol table: 
a -> Ref(0, Int)->2
v -> Int->1

Output: 

File table: 

Heap: 
1 -> 20
2 -> Int->1

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#10
Execution stack: 
new(v, 60); print(rH(rH(a)));

Symbol table: 
a -> Ref(0, Int)->2
v -> Int->3

Output: 

File table: 

Heap: 
1 -> 20
2 -> Int->3
3 -> 30

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#10
Execution stack: 
print(rH(rH(a)))
new(v, 60)

Symbol table: 
a -> Ref(0, Int)->2
v -> Int->3

Output: 

File table: 

Heap: 
1 -> 20
2 -> Int->3
3 -> 30

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#10
Execution stack: 
print(rH(rH(a)))

Symbol table: 
a -> Ref(0, Int)->2
v -> Int->4

Output: 

File table: 

Heap: 
1 -> 20
2 -> Int->4
3 -> 30
4 -> 60

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#10
Execution stack: 

Symbol table: 
a -> Ref(0, Int)->2
v -> Int->4

Output: 
60

File table: 

Heap: 
1 -> 20
2 -> Int->4
3 -> 30
4 -> 60

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#11
Execution stack: 
Ref(0, Int) a; v=10; new(a, 22); fork(wH(a,30); v=32; print(v); print(rH(a));); print(v); print(rH(a));
Int v

Symbol table: 

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#11
Execution stack: 
Ref(0, Int) a; v=10; new(a, 22); fork(wH(a,30); v=32; print(v); print(rH(a));); print(v); print(rH(a));

Symbol table: 
v -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#11
Execution stack: 
v=10; new(a, 22); fork(wH(a,30); v=32; print(v); print(rH(a));); print(v); print(rH(a));
Ref(0, Int) a

Symbol table: 
v -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#11
Execution stack: 
v=10; new(a, 22); fork(wH(a,30); v=32; print(v); print(rH(a));); print(v); print(rH(a));

Symbol table: 
a -> Int->0
v -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#11
Execution stack: 
new(a, 22); fork(wH(a,30); v=32; print(v); print(rH(a));); print(v); print(rH(a));
v=10

Symbol table: 
a -> Int->0
v -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#11
Execution stack: 
new(a, 22); fork(wH(a,30); v=32; print(v); print(rH(a));); print(v); print(rH(a));

Symbol table: 
a -> Int->0
v -> 10

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#11
Execution stack: 
fork(wH(a,30); v=32; print(v); print(rH(a));); print(v); print(rH(a));
new(a, 22)

Symbol table: 
a -> Int->0
v -> 10

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#11
Execution stack: 
fork(wH(a,30); v=32; print(v); print(rH(a));); print(v); print(rH(a));

Symbol table: 
a -> Int->1
v -> 10

Output: 

File table: 

Heap: 
1 -> 22

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#11
Execution stack: 
print(v); print(rH(a));
fork(wH(a,30); v=32; print(v); print(rH(a));)

Symbol table: 
a -> Int->1
v -> 10

Output: 

File table: 

Heap: 
1 -> 22

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#11
Execution stack: 
print(v); print(rH(a));

Symbol table: 
a -> Int->1
v -> 10

Output: 

File table: 

Heap: 
1 -> 22

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#12
Execution stack: 
wH(a,30); v=32; print(v); print(rH(a));

Symbol table: 
a -> Int->1
v -> 10

Output: 

File table: 

Heap: 
1 -> 22

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#11
Execution stack: 
print(rH(a))
print(v)

Symbol table: 
a -> Int->1
v -> 10

Output: 

File table: 

Heap: 
1 -> 22

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#12
Execution stack: 
v=32; print(v); print(rH(a));
wH(a,30)

Symbol table: 
a -> Int->1
v -> 10

Output: 

File table: 

Heap: 
1 -> 22

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#11
Execution stack: 
print(rH(a))

Symbol table: 
a -> Int->1
v -> 10

Output: 
10

File table: 

Heap: 
1 -> 30

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#12
Execution stack: 
v=32; print(v); print(rH(a));

Symbol table: 
a -> Int->1
v -> 10

Output: 
10

File table: 

Heap: 
1 -> 30

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#11
Execution stack: 

Symbol table: 
a -> Int->1
v -> 10

Output: 
10
30

File table: 

Heap: 
1 -> 30

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#12
Execution stack: 
print(v); print(rH(a));
v=32

Symbol table: 
a -> Int->1
v -> 10

Output: 
10
30

File table: 

Heap: 
1 -> 30

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#12
Execution stack: 
print(v); print(rH(a));

Symbol table: 
a -> Int->1
v -> 32

Output: 
10
30

File table: 

Heap: 
1 -> 30

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#12
Execution stack: 
print(rH(a))
print(v)

Symbol table: 
a -> Int->1
v -> 32

Output: 
10
30

File table: 

Heap: 
1 -> 30

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#12
Execution stack: 
print(rH(a))

Symbol table: 
a -> Int->1
v -> 32

Output: 
10
30
32

File table: 

Heap: 
1 -> 30

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#12
Execution stack: 

Symbol table: 
a -> Int->1
v -> 32

Output: 
10
30
32
30

File table: 

Heap: 
1 -> 30

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
Int x; Int y; v=0; repeat (fork(print(v); v=v-1;); v=v+1;) 
until (v == 3); x=1; NoOperation; y=3; NoOperation; print(v*10);
Int v

Symbol table: 

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
Int x; Int y; v=0; repeat (fork(print(v); v=v-1;); v=v+1;) 
until (v == 3); x=1; NoOperation; y=3; NoOperation; print(v*10);

Symbol table: 
v -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
Int y; v=0; repeat (fork(print(v); v=v-1;); v=v+1;) 
until (v == 3); x=1; NoOperation; y=3; NoOperation; print(v*10);
Int x

Symbol table: 
v -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
Int y; v=0; repeat (fork(print(v); v=v-1;); v=v+1;) 
until (v == 3); x=1; NoOperation; y=3; NoOperation; print(v*10);

Symbol table: 
v -> 0
x -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
v=0; repeat (fork(print(v); v=v-1;); v=v+1;) 
until (v == 3); x=1; NoOperation; y=3; NoOperation; print(v*10);
Int y

Symbol table: 
v -> 0
x -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
v=0; repeat (fork(print(v); v=v-1;); v=v+1;) 
until (v == 3); x=1; NoOperation; y=3; NoOperation; print(v*10);

Symbol table: 
v -> 0
x -> 0
y -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
repeat (fork(print(v); v=v-1;); v=v+1;) 
until (v == 3); x=1; NoOperation; y=3; NoOperation; print(v*10);
v=0

Symbol table: 
v -> 0
x -> 0
y -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
repeat (fork(print(v); v=v-1;); v=v+1;) 
until (v == 3); x=1; NoOperation; y=3; NoOperation; print(v*10);

Symbol table: 
v -> 0
x -> 0
y -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
x=1; NoOperation; y=3; NoOperation; print(v*10);
repeat (fork(print(v); v=v-1;); v=v+1;) 
until (v == 3)

Symbol table: 
v -> 0
x -> 0
y -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
x=1; NoOperation; y=3; NoOperation; print(v*10);
while(v == 3 == false)
{ fork(print(v); v=v-1;); v=v+1; }

Symbol table: 
v -> 0
x -> 0
y -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
x=1; NoOperation; y=3; NoOperation; print(v*10);
while(v == 3 == false)
{ fork(print(v); v=v-1;); v=v+1; }
fork(print(v); v=v-1;); v=v+1;

Symbol table: 
v -> 0
x -> 0
y -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
x=1; NoOperation; y=3; NoOperation; print(v*10);
while(v == 3 == false)
{ fork(print(v); v=v-1;); v=v+1; }
v=v+1
fork(print(v); v=v-1;)

Symbol table: 
v -> 0
x -> 0
y -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
x=1; NoOperation; y=3; NoOperation; print(v*10);
while(v == 3 == false)
{ fork(print(v); v=v-1;); v=v+1; }
v=v+1

Symbol table: 
v -> 0
x -> 0
y -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#14
Execution stack: 
print(v); v=v-1;

Symbol table: 
v -> 0
x -> 0
y -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
x=1; NoOperation; y=3; NoOperation; print(v*10);
while(v == 3 == false)
{ fork(print(v); v=v-1;); v=v+1; }

Symbol table: 
v -> 1
x -> 0
y -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#14
Execution stack: 
v=v-1
print(v)

Symbol table: 
v -> 0
x -> 0
y -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
x=1; NoOperation; y=3; NoOperation; print(v*10);
while(v == 3 == false)
{ fork(print(v); v=v-1;); v=v+1; }
fork(print(v); v=v-1;); v=v+1;

Symbol table: 
v -> 1
x -> 0
y -> 0

Output: 
0

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#14
Execution stack: 
v=v-1

Symbol table: 
v -> 0
x -> 0
y -> 0

Output: 
0

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
x=1; NoOperation; y=3; NoOperation; print(v*10);
while(v == 3 == false)
{ fork(print(v); v=v-1;); v=v+1; }
v=v+1
fork(print(v); v=v-1;)

Symbol table: 
v -> 1
x -> 0
y -> 0

Output: 
0

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#14
Execution stack: 

Symbol table: 
v -> -1
x -> 0
y -> 0

Output: 
0

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
x=1; NoOperation; y=3; NoOperation; print(v*10);
while(v == 3 == false)
{ fork(print(v); v=v-1;); v=v+1; }
v=v+1

Symbol table: 
v -> 1
x -> 0
y -> 0

Output: 
0

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#15
Execution stack: 
print(v); v=v-1;

Symbol table: 
v -> 1
x -> 0
y -> 0

Output: 
0

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
x=1; NoOperation; y=3; NoOperation; print(v*10);
while(v == 3 == false)
{ fork(print(v); v=v-1;); v=v+1; }

Symbol table: 
v -> 2
x -> 0
y -> 0

Output: 
0

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#15
Execution stack: 
v=v-1
print(v)

Symbol table: 
v -> 1
x -> 0
y -> 0

Output: 
0

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
x=1; NoOperation; y=3; NoOperation; print(v*10);
while(v == 3 == false)
{ fork(print(v); v=v-1;); v=v+1; }
fork(print(v); v=v-1;); v=v+1;

Symbol table: 
v -> 2
x -> 0
y -> 0

Output: 
0
1

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#15
Execution stack: 
v=v-1

Symbol table: 
v -> 1
x -> 0
y -> 0

Output: 
0
1

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
x=1; NoOperation; y=3; NoOperation; print(v*10);
while(v == 3 == false)
{ fork(print(v); v=v-1;); v=v+1; }
v=v+1
fork(print(v); v=v-1;)

Symbol table: 
v -> 2
x -> 0
y -> 0

Output: 
0
1

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#15
Execution stack: 

Symbol table: 
v -> 0
x -> 0
y -> 0

Output: 
0
1

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
x=1; NoOperation; y=3; NoOperation; print(v*10);
while(v == 3 == false)
{ fork(print(v); v=v-1;); v=v+1; }
v=v+1

Symbol table: 
v -> 2
x -> 0
y -> 0

Output: 
0
1

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#16
Execution stack: 
print(v); v=v-1;

Symbol table: 
v -> 2
x -> 0
y -> 0

Output: 
0
1

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
x=1; NoOperation; y=3; NoOperation; print(v*10);
while(v == 3 == false)
{ fork(print(v); v=v-1;); v=v+1; }

Symbol table: 
v -> 3
x -> 0
y -> 0

Output: 
0
1

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#16
Execution stack: 
v=v-1
print(v)

Symbol table: 
v -> 2
x -> 0
y -> 0

Output: 
0
1

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
x=1; NoOperation; y=3; NoOperation; print(v*10);

Symbol table: 
v -> 3
x -> 0
y -> 0

Output: 
0
1
2

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#16
Execution stack: 
v=v-1

Symbol table: 
v -> 2
x -> 0
y -> 0

Output: 
0
1
2

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
NoOperation; y=3; NoOperation; print(v*10);
x=1

Symbol table: 
v -> 3
x -> 0
y -> 0

Output: 
0
1
2

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#16
Execution stack: 

Symbol table: 
v -> 1
x -> 0
y -> 0

Output: 
0
1
2

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
NoOperation; y=3; NoOperation; print(v*10);

Symbol table: 
v -> 3
x -> 1
y -> 0

Output: 
0
1
2

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
y=3; NoOperation; print(v*10);
NoOperation

Symbol table: 
v -> 3
x -> 1
y -> 0

Output: 
0
1
2

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
y=3; NoOperation; print(v*10);

Symbol table: 
v -> 3
x -> 1
y -> 0

Output: 
0
1
2

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
NoOperation; print(v*10);
y=3

Symbol table: 
v -> 3
x -> 1
y -> 0

Output: 
0
1
2

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
NoOperation; print(v*10);

Symbol table: 
v -> 3
x -> 1
y -> 3

Output: 
0
1
2

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
print(v*10)
NoOperation

Symbol table: 
v -> 3
x -> 1
y -> 3

Output: 
0
1
2

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 
print(v*10)

Symbol table: 
v -> 3
x -> 1
y -> 3

Output: 
0
1
2

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#13
Execution stack: 

Symbol table: 
v -> 3
x -> 1
y -> 3

Output: 
0
1
2
30

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#17
Execution stack: 
new(a, 20); for(v=0; v<3; v=v+1); print(rH(a));
Ref(0, Int) a

Symbol table: 

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#17
Execution stack: 
new(a, 20); for(v=0; v<3; v=v+1); print(rH(a));

Symbol table: 
a -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#17
Execution stack: 
for(v=0; v<3; v=v+1); print(rH(a));
new(a, 20)

Symbol table: 
a -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#17
Execution stack: 
for(v=0; v<3; v=v+1); print(rH(a));

Symbol table: 
a -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#17
Execution stack: 
print(rH(a))
for(v=0; v<3; v=v+1)

Symbol table: 
a -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#17
Execution stack: 
print(rH(a))
Int v; v=0; while(v < 3)
{ fork(print(v); v=v*rH(a);); v=v+1; };

Symbol table: 
a -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#17
Execution stack: 
print(rH(a))
v=0; while(v < 3)
{ fork(print(v); v=v*rH(a);); v=v+1; };
Int v

Symbol table: 
a -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#17
Execution stack: 
print(rH(a))
v=0; while(v < 3)
{ fork(print(v); v=v*rH(a);); v=v+1; };

Symbol table: 
a -> Int->1
v -> 0

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#17
Execution stack: 
print(rH(a))
while(v < 3)
{ fork(print(v); v=v*rH(a);); v=v+1; }
v=0

Symbol table: 
a -> Int->1
v -> 0

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#17
Execution stack: 
print(rH(a))
while(v < 3)
{ fork(print(v); v=v*rH(a);); v=v+1; }

Symbol table: 
a -> Int->1
v -> 0

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#17
Execution stack: 
print(rH(a))
while(v < 3)
{ fork(print(v); v=v*rH(a);); v=v+1; }
fork(print(v); v=v*rH(a);); v=v+1;

Symbol table: 
a -> Int->1
v -> 0

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#17
Execution stack: 
print(rH(a))
while(v < 3)
{ fork(print(v); v=v*rH(a);); v=v+1; }
v=v+1
fork(print(v); v=v*rH(a);)

Symbol table: 
a -> Int->1
v -> 0

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#17
Execution stack: 
print(rH(a))
while(v < 3)
{ fork(print(v); v=v*rH(a);); v=v+1; }
v=v+1

Symbol table: 
a -> Int->1
v -> 0

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#18
Execution stack: 
print(v); v=v*rH(a);

Symbol table: 
a -> Int->1
v -> 0

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#17
Execution stack: 
print(rH(a))
while(v < 3)
{ fork(print(v); v=v*rH(a);); v=v+1; }

Symbol table: 
a -> Int->1
v -> 1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#18
Execution stack: 
v=v*rH(a)
print(v)

Symbol table: 
a -> Int->1
v -> 0

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#17
Execution stack: 
print(rH(a))
while(v < 3)
{ fork(print(v); v=v*rH(a);); v=v+1; }
fork(print(v); v=v*rH(a);); v=v+1;

Symbol table: 
a -> Int->1
v -> 1

Output: 
0

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#18
Execution stack: 
v=v*rH(a)

Symbol table: 
a -> Int->1
v -> 0

Output: 
0

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#17
Execution stack: 
print(rH(a))
while(v < 3)
{ fork(print(v); v=v*rH(a);); v=v+1; }
v=v+1
fork(print(v); v=v*rH(a);)

Symbol table: 
a -> Int->1
v -> 1

Output: 
0

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#18
Execution stack: 

Symbol table: 
a -> Int->1
v -> 0

Output: 
0

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#17
Execution stack: 
print(rH(a))
while(v < 3)
{ fork(print(v); v=v*rH(a);); v=v+1; }
v=v+1

Symbol table: 
a -> Int->1
v -> 1

Output: 
0

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#19
Execution stack: 
print(v); v=v*rH(a);

Symbol table: 
a -> Int->1
v -> 1

Output: 
0

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#17
Execution stack: 
print(rH(a))
while(v < 3)
{ fork(print(v); v=v*rH(a);); v=v+1; }

Symbol table: 
a -> Int->1
v -> 2

Output: 
0

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#19
Execution stack: 
v=v*rH(a)
print(v)

Symbol table: 
a -> Int->1
v -> 1

Output: 
0

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#17
Execution stack: 
print(rH(a))
while(v < 3)
{ fork(print(v); v=v*rH(a);); v=v+1; }
fork(print(v); v=v*rH(a);); v=v+1;

Symbol table: 
a -> Int->1
v -> 2

Output: 
0
1

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#19
Execution stack: 
v=v*rH(a)

Symbol table: 
a -> Int->1
v -> 1

Output: 
0
1

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#17
Execution stack: 
print(rH(a))
while(v < 3)
{ fork(print(v); v=v*rH(a);); v=v+1; }
v=v+1
fork(print(v); v=v*rH(a);)

Symbol table: 
a -> Int->1
v -> 2

Output: 
0
1

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#19
Execution stack: 

Symbol table: 
a -> Int->1
v -> 20

Output: 
0
1

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#17
Execution stack: 
print(rH(a))
while(v < 3)
{ fork(print(v); v=v*rH(a);); v=v+1; }
v=v+1

Symbol table: 
a -> Int->1
v -> 2

Output: 
0
1

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#20
Execution stack: 
print(v); v=v*rH(a);

Symbol table: 
a -> Int->1
v -> 2

Output: 
0
1

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#17
Execution stack: 
print(rH(a))
while(v < 3)
{ fork(print(v); v=v*rH(a);); v=v+1; }

Symbol table: 
a -> Int->1
v -> 3

Output: 
0
1

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#20
Execution stack: 
v=v*rH(a)
print(v)

Symbol table: 
a -> Int->1
v -> 2

Output: 
0
1

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#17
Execution stack: 
print(rH(a))

Symbol table: 
a -> Int->1
v -> 3

Output: 
0
1
2

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#20
Execution stack: 
v=v*rH(a)

Symbol table: 
a -> Int->1
v -> 2

Output: 
0
1
2

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#17
Execution stack: 

Symbol table: 
a -> Int->1
v -> 3

Output: 
0
1
2
20

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#20
Execution stack: 

Symbol table: 
a -> Int->1
v -> 40

Output: 
0
1
2
20

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
Ref(0, Int) v2; Int x; Int q; new(v1, 20); new(v2, 30); newLock(x); fork(fork(lock(x); wH(v1,rH(v1)-1); unlock(x);); lock(x); wH(v1,rH(v1)*10); unlock(x);); newLock(q); fork(fork(lock(q); wH(v2,rH(v2)+5); unlock(q);); lock(q); wH(v2,rH(v2)*10); unlock(q);); NoOperation; NoOperation; NoOperation; NoOperation; lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);
Ref(0, Int) v1

Symbol table: 

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
Ref(0, Int) v2; Int x; Int q; new(v1, 20); new(v2, 30); newLock(x); fork(fork(lock(x); wH(v1,rH(v1)-1); unlock(x);); lock(x); wH(v1,rH(v1)*10); unlock(x);); newLock(q); fork(fork(lock(q); wH(v2,rH(v2)+5); unlock(q);); lock(q); wH(v2,rH(v2)*10); unlock(q);); NoOperation; NoOperation; NoOperation; NoOperation; lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);

Symbol table: 
v1 -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
Int x; Int q; new(v1, 20); new(v2, 30); newLock(x); fork(fork(lock(x); wH(v1,rH(v1)-1); unlock(x);); lock(x); wH(v1,rH(v1)*10); unlock(x);); newLock(q); fork(fork(lock(q); wH(v2,rH(v2)+5); unlock(q);); lock(q); wH(v2,rH(v2)*10); unlock(q);); NoOperation; NoOperation; NoOperation; NoOperation; lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);
Ref(0, Int) v2

Symbol table: 
v1 -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
Int x; Int q; new(v1, 20); new(v2, 30); newLock(x); fork(fork(lock(x); wH(v1,rH(v1)-1); unlock(x);); lock(x); wH(v1,rH(v1)*10); unlock(x);); newLock(q); fork(fork(lock(q); wH(v2,rH(v2)+5); unlock(q);); lock(q); wH(v2,rH(v2)*10); unlock(q);); NoOperation; NoOperation; NoOperation; NoOperation; lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);

Symbol table: 
v1 -> Int->0
v2 -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
Int q; new(v1, 20); new(v2, 30); newLock(x); fork(fork(lock(x); wH(v1,rH(v1)-1); unlock(x);); lock(x); wH(v1,rH(v1)*10); unlock(x);); newLock(q); fork(fork(lock(q); wH(v2,rH(v2)+5); unlock(q);); lock(q); wH(v2,rH(v2)*10); unlock(q);); NoOperation; NoOperation; NoOperation; NoOperation; lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);
Int x

Symbol table: 
v1 -> Int->0
v2 -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
Int q; new(v1, 20); new(v2, 30); newLock(x); fork(fork(lock(x); wH(v1,rH(v1)-1); unlock(x);); lock(x); wH(v1,rH(v1)*10); unlock(x);); newLock(q); fork(fork(lock(q); wH(v2,rH(v2)+5); unlock(q);); lock(q); wH(v2,rH(v2)*10); unlock(q);); NoOperation; NoOperation; NoOperation; NoOperation; lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);

Symbol table: 
x -> 0
v1 -> Int->0
v2 -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
new(v1, 20); new(v2, 30); newLock(x); fork(fork(lock(x); wH(v1,rH(v1)-1); unlock(x);); lock(x); wH(v1,rH(v1)*10); unlock(x);); newLock(q); fork(fork(lock(q); wH(v2,rH(v2)+5); unlock(q);); lock(q); wH(v2,rH(v2)*10); unlock(q);); NoOperation; NoOperation; NoOperation; NoOperation; lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);
Int q

Symbol table: 
x -> 0
v1 -> Int->0
v2 -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
new(v1, 20); new(v2, 30); newLock(x); fork(fork(lock(x); wH(v1,rH(v1)-1); unlock(x);); lock(x); wH(v1,rH(v1)*10); unlock(x);); newLock(q); fork(fork(lock(q); wH(v2,rH(v2)+5); unlock(q);); lock(q); wH(v2,rH(v2)*10); unlock(q);); NoOperation; NoOperation; NoOperation; NoOperation; lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);

Symbol table: 
q -> 0
x -> 0
v1 -> Int->0
v2 -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
new(v2, 30); newLock(x); fork(fork(lock(x); wH(v1,rH(v1)-1); unlock(x);); lock(x); wH(v1,rH(v1)*10); unlock(x);); newLock(q); fork(fork(lock(q); wH(v2,rH(v2)+5); unlock(q);); lock(q); wH(v2,rH(v2)*10); unlock(q);); NoOperation; NoOperation; NoOperation; NoOperation; lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);
new(v1, 20)

Symbol table: 
q -> 0
x -> 0
v1 -> Int->0
v2 -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
new(v2, 30); newLock(x); fork(fork(lock(x); wH(v1,rH(v1)-1); unlock(x);); lock(x); wH(v1,rH(v1)*10); unlock(x);); newLock(q); fork(fork(lock(q); wH(v2,rH(v2)+5); unlock(q);); lock(q); wH(v2,rH(v2)*10); unlock(q);); NoOperation; NoOperation; NoOperation; NoOperation; lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);

Symbol table: 
q -> 0
x -> 0
v1 -> Int->1
v2 -> Int->0

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
newLock(x); fork(fork(lock(x); wH(v1,rH(v1)-1); unlock(x);); lock(x); wH(v1,rH(v1)*10); unlock(x);); newLock(q); fork(fork(lock(q); wH(v2,rH(v2)+5); unlock(q);); lock(q); wH(v2,rH(v2)*10); unlock(q);); NoOperation; NoOperation; NoOperation; NoOperation; lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);
new(v2, 30)

Symbol table: 
q -> 0
x -> 0
v1 -> Int->1
v2 -> Int->0

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
newLock(x); fork(fork(lock(x); wH(v1,rH(v1)-1); unlock(x);); lock(x); wH(v1,rH(v1)*10); unlock(x);); newLock(q); fork(fork(lock(q); wH(v2,rH(v2)+5); unlock(q);); lock(q); wH(v2,rH(v2)*10); unlock(q);); NoOperation; NoOperation; NoOperation; NoOperation; lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);

Symbol table: 
q -> 0
x -> 0
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 20
2 -> 30

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
fork(fork(lock(x); wH(v1,rH(v1)-1); unlock(x);); lock(x); wH(v1,rH(v1)*10); unlock(x);); newLock(q); fork(fork(lock(q); wH(v2,rH(v2)+5); unlock(q);); lock(q); wH(v2,rH(v2)*10); unlock(q);); NoOperation; NoOperation; NoOperation; NoOperation; lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);
newLock(x)

Symbol table: 
q -> 0
x -> 0
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 20
2 -> 30

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
fork(fork(lock(x); wH(v1,rH(v1)-1); unlock(x);); lock(x); wH(v1,rH(v1)*10); unlock(x);); newLock(q); fork(fork(lock(q); wH(v2,rH(v2)+5); unlock(q);); lock(q); wH(v2,rH(v2)*10); unlock(q);); NoOperation; NoOperation; NoOperation; NoOperation; lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);

Symbol table: 
q -> 0
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 20
2 -> 30

Lock table: 
1 -> -1

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
newLock(q); fork(fork(lock(q); wH(v2,rH(v2)+5); unlock(q);); lock(q); wH(v2,rH(v2)*10); unlock(q);); NoOperation; NoOperation; NoOperation; NoOperation; lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);
fork(fork(lock(x); wH(v1,rH(v1)-1); unlock(x);); lock(x); wH(v1,rH(v1)*10); unlock(x);)

Symbol table: 
q -> 0
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 20
2 -> 30

Lock table: 
1 -> -1

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
newLock(q); fork(fork(lock(q); wH(v2,rH(v2)+5); unlock(q);); lock(q); wH(v2,rH(v2)*10); unlock(q);); NoOperation; NoOperation; NoOperation; NoOperation; lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);

Symbol table: 
q -> 0
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 20
2 -> 30

Lock table: 
1 -> -1

Semaphore table: 
-------------------------------
Current program state: id#22
Execution stack: 
fork(lock(x); wH(v1,rH(v1)-1); unlock(x);); lock(x); wH(v1,rH(v1)*10); unlock(x);

Symbol table: 
q -> 0
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 20
2 -> 30

Lock table: 
1 -> -1

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
fork(fork(lock(q); wH(v2,rH(v2)+5); unlock(q);); lock(q); wH(v2,rH(v2)*10); unlock(q);); NoOperation; NoOperation; NoOperation; NoOperation; lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);
newLock(q)

Symbol table: 
q -> 0
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 20
2 -> 30

Lock table: 
1 -> -1

Semaphore table: 
-------------------------------
Current program state: id#22
Execution stack: 
lock(x); wH(v1,rH(v1)*10); unlock(x);
fork(lock(x); wH(v1,rH(v1)-1); unlock(x);)

Symbol table: 
q -> 0
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 20
2 -> 30

Lock table: 
1 -> -1

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
fork(fork(lock(q); wH(v2,rH(v2)+5); unlock(q);); lock(q); wH(v2,rH(v2)*10); unlock(q);); NoOperation; NoOperation; NoOperation; NoOperation; lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 20
2 -> 30

Lock table: 
1 -> -1
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#22
Execution stack: 
lock(x); wH(v1,rH(v1)*10); unlock(x);

Symbol table: 
q -> 0
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 20
2 -> 30

Lock table: 
1 -> -1
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#23
Execution stack: 
lock(x); wH(v1,rH(v1)-1); unlock(x);

Symbol table: 
q -> 0
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 20
2 -> 30

Lock table: 
1 -> -1
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
NoOperation; NoOperation; NoOperation; NoOperation; lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);
fork(fork(lock(q); wH(v2,rH(v2)+5); unlock(q);); lock(q); wH(v2,rH(v2)*10); unlock(q);)

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 20
2 -> 30

Lock table: 
1 -> -1
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#22
Execution stack: 
wH(v1,rH(v1)*10); unlock(x);
lock(x)

Symbol table: 
q -> 0
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 20
2 -> 30

Lock table: 
1 -> -1
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#23
Execution stack: 
wH(v1,rH(v1)-1); unlock(x);
lock(x)

Symbol table: 
q -> 0
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 20
2 -> 30

Lock table: 
1 -> -1
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
NoOperation; NoOperation; NoOperation; NoOperation; lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 20
2 -> 30

Lock table: 
1 -> 23
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#22
Execution stack: 
wH(v1,rH(v1)*10); unlock(x);

Symbol table: 
q -> 0
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 20
2 -> 30

Lock table: 
1 -> 23
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#23
Execution stack: 
wH(v1,rH(v1)-1); unlock(x);

Symbol table: 
q -> 0
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 20
2 -> 30

Lock table: 
1 -> 23
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#24
Execution stack: 
fork(lock(q); wH(v2,rH(v2)+5); unlock(q);); lock(q); wH(v2,rH(v2)*10); unlock(q);

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 20
2 -> 30

Lock table: 
1 -> 23
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
NoOperation; NoOperation; NoOperation; lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);
NoOperation

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 20
2 -> 30

Lock table: 
1 -> 23
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#22
Execution stack: 
unlock(x)
wH(v1,rH(v1)*10)

Symbol table: 
q -> 0
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 20
2 -> 30

Lock table: 
1 -> 23
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#23
Execution stack: 
unlock(x)
wH(v1,rH(v1)-1)

Symbol table: 
q -> 0
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 20
2 -> 30

Lock table: 
1 -> 23
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#24
Execution stack: 
lock(q); wH(v2,rH(v2)*10); unlock(q);
fork(lock(q); wH(v2,rH(v2)+5); unlock(q);)

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 20
2 -> 30

Lock table: 
1 -> 23
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
NoOperation; NoOperation; NoOperation; lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 30

Lock table: 
1 -> 23
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#22
Execution stack: 
unlock(x)

Symbol table: 
q -> 0
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 30

Lock table: 
1 -> 23
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#23
Execution stack: 
unlock(x)

Symbol table: 
q -> 0
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 30

Lock table: 
1 -> 23
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#24
Execution stack: 
lock(q); wH(v2,rH(v2)*10); unlock(q);

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 30

Lock table: 
1 -> 23
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#25
Execution stack: 
lock(q); wH(v2,rH(v2)+5); unlock(q);

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 30

Lock table: 
1 -> 23
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
NoOperation; NoOperation; lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);
NoOperation

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 30

Lock table: 
1 -> -1
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#22
Execution stack: 

Symbol table: 
q -> 0
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 30

Lock table: 
1 -> -1
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#23
Execution stack: 

Symbol table: 
q -> 0
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 30

Lock table: 
1 -> -1
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#24
Execution stack: 
wH(v2,rH(v2)*10); unlock(q);
lock(q)

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 30

Lock table: 
1 -> -1
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#25
Execution stack: 
wH(v2,rH(v2)+5); unlock(q);
lock(q)

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 30

Lock table: 
1 -> -1
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
NoOperation; NoOperation; lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 30

Lock table: 
1 -> -1
2 -> 24

Semaphore table: 
-------------------------------
Current program state: id#24
Execution stack: 
wH(v2,rH(v2)*10); unlock(q);

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 30

Lock table: 
1 -> -1
2 -> 24

Semaphore table: 
-------------------------------
Current program state: id#25
Execution stack: 
wH(v2,rH(v2)+5); unlock(q);
lock(q)

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 30

Lock table: 
1 -> -1
2 -> 24

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
NoOperation; lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);
NoOperation

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 30

Lock table: 
1 -> -1
2 -> 24

Semaphore table: 
-------------------------------
Current program state: id#24
Execution stack: 
unlock(q)
wH(v2,rH(v2)*10)

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 30

Lock table: 
1 -> -1
2 -> 24

Semaphore table: 
-------------------------------
Current program state: id#25
Execution stack: 
wH(v2,rH(v2)+5); unlock(q);
lock(q)

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 30

Lock table: 
1 -> -1
2 -> 24

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
NoOperation; lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 300

Lock table: 
1 -> -1
2 -> 24

Semaphore table: 
-------------------------------
Current program state: id#24
Execution stack: 
unlock(q)

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 300

Lock table: 
1 -> -1
2 -> 24

Semaphore table: 
-------------------------------
Current program state: id#25
Execution stack: 
wH(v2,rH(v2)+5); unlock(q);
lock(q)

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 300

Lock table: 
1 -> -1
2 -> 24

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);
NoOperation

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 300

Lock table: 
1 -> -1
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#24
Execution stack: 

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 300

Lock table: 
1 -> -1
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#25
Execution stack: 
wH(v2,rH(v2)+5); unlock(q);
lock(q)

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 300

Lock table: 
1 -> -1
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
lock(x); print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 300

Lock table: 
1 -> -1
2 -> 25

Semaphore table: 
-------------------------------
Current program state: id#25
Execution stack: 
wH(v2,rH(v2)+5); unlock(q);

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 300

Lock table: 
1 -> -1
2 -> 25

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);
lock(x)

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 300

Lock table: 
1 -> -1
2 -> 25

Semaphore table: 
-------------------------------
Current program state: id#25
Execution stack: 
unlock(q)
wH(v2,rH(v2)+5)

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 300

Lock table: 
1 -> -1
2 -> 25

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
print(rH(v1)); unlock(x); lock(q); print(rH(v2)); unlock(q);

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 305

Lock table: 
1 -> 21
2 -> 25

Semaphore table: 
-------------------------------
Current program state: id#25
Execution stack: 
unlock(q)

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 305

Lock table: 
1 -> 21
2 -> 25

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
unlock(x); lock(q); print(rH(v2)); unlock(q);
print(rH(v1))

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 305

Lock table: 
1 -> 21
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#25
Execution stack: 

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 

File table: 

Heap: 
1 -> 199
2 -> 305

Lock table: 
1 -> 21
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
unlock(x); lock(q); print(rH(v2)); unlock(q);

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 
199

File table: 

Heap: 
1 -> 199
2 -> 305

Lock table: 
1 -> 21
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
lock(q); print(rH(v2)); unlock(q);
unlock(x)

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 
199

File table: 

Heap: 
1 -> 199
2 -> 305

Lock table: 
1 -> 21
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
lock(q); print(rH(v2)); unlock(q);

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 
199

File table: 

Heap: 
1 -> 199
2 -> 305

Lock table: 
1 -> -1
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
print(rH(v2)); unlock(q);
lock(q)

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 
199

File table: 

Heap: 
1 -> 199
2 -> 305

Lock table: 
1 -> -1
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
print(rH(v2)); unlock(q);

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 
199

File table: 

Heap: 
1 -> 199
2 -> 305

Lock table: 
1 -> -1
2 -> 21

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
unlock(q)
print(rH(v2))

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 
199

File table: 

Heap: 
1 -> 199
2 -> 305

Lock table: 
1 -> -1
2 -> 21

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 
unlock(q)

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 
199
305

File table: 

Heap: 
1 -> 199
2 -> 305

Lock table: 
1 -> -1
2 -> 21

Semaphore table: 
-------------------------------
Current program state: id#21
Execution stack: 

Symbol table: 
q -> 2
x -> 1
v1 -> Int->1
v2 -> Int->2

Output: 
199
305

File table: 

Heap: 
1 -> 199
2 -> 305

Lock table: 
1 -> -1
2 -> -1

Semaphore table: 
-------------------------------
Current program state: id#26
Execution stack: 
v=1; fork(v=2); fork(v=3);
Int v

Symbol table: 

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#26
Execution stack: 
v=1; fork(v=2); fork(v=3);

Symbol table: 
v -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#26
Execution stack: 
fork(v=2); fork(v=3);
v=1

Symbol table: 
v -> 0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#26
Execution stack: 
fork(v=2); fork(v=3);

Symbol table: 
v -> 1

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#26
Execution stack: 
fork(v=3)
fork(v=2)

Symbol table: 
v -> 1

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#26
Execution stack: 
fork(v=3)

Symbol table: 
v -> 1

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#27
Execution stack: 
v=2

Symbol table: 
v -> 1

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#26
Execution stack: 

Symbol table: 
v -> 1

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#27
Execution stack: 

Symbol table: 
v -> 2

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#28
Execution stack: 
v=3

Symbol table: 
v -> 1

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#28
Execution stack: 

Symbol table: 
v -> 3

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#29
Execution stack: 
Int cnt; new(v1, 2); newSemaphore(cnt, rH(v1), 1); fork(acquire(cnt); wH(v1,10*rH(v1)); print(rH(v1)); release(cnt);); fork(acquire(cnt); wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);); acquire(cnt); print(rH(v1)-1); release(cnt);
Ref(0, Int) v1

Symbol table: 

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#29
Execution stack: 
Int cnt; new(v1, 2); newSemaphore(cnt, rH(v1), 1); fork(acquire(cnt); wH(v1,10*rH(v1)); print(rH(v1)); release(cnt);); fork(acquire(cnt); wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);); acquire(cnt); print(rH(v1)-1); release(cnt);

Symbol table: 
v1 -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#29
Execution stack: 
new(v1, 2); newSemaphore(cnt, rH(v1), 1); fork(acquire(cnt); wH(v1,10*rH(v1)); print(rH(v1)); release(cnt);); fork(acquire(cnt); wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);); acquire(cnt); print(rH(v1)-1); release(cnt);
Int cnt

Symbol table: 
v1 -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#29
Execution stack: 
new(v1, 2); newSemaphore(cnt, rH(v1), 1); fork(acquire(cnt); wH(v1,10*rH(v1)); print(rH(v1)); release(cnt);); fork(acquire(cnt); wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);); acquire(cnt); print(rH(v1)-1); release(cnt);

Symbol table: 
cnt -> 0
v1 -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#29
Execution stack: 
newSemaphore(cnt, rH(v1), 1); fork(acquire(cnt); wH(v1,10*rH(v1)); print(rH(v1)); release(cnt);); fork(acquire(cnt); wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);); acquire(cnt); print(rH(v1)-1); release(cnt);
new(v1, 2)

Symbol table: 
cnt -> 0
v1 -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#29
Execution stack: 
newSemaphore(cnt, rH(v1), 1); fork(acquire(cnt); wH(v1,10*rH(v1)); print(rH(v1)); release(cnt);); fork(acquire(cnt); wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);); acquire(cnt); print(rH(v1)-1); release(cnt);

Symbol table: 
cnt -> 0
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#29
Execution stack: 
fork(acquire(cnt); wH(v1,10*rH(v1)); print(rH(v1)); release(cnt);); fork(acquire(cnt); wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);); acquire(cnt); print(rH(v1)-1); release(cnt);
newSemaphore(cnt, rH(v1), 1)

Symbol table: 
cnt -> 0
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#29
Execution stack: 
fork(acquire(cnt); wH(v1,10*rH(v1)); print(rH(v1)); release(cnt);); fork(acquire(cnt); wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);); acquire(cnt); print(rH(v1)-1); release(cnt);

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
1 -> 1, [], 2
-------------------------------
Current program state: id#29
Execution stack: 
fork(acquire(cnt); wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);); acquire(cnt); print(rH(v1)-1); release(cnt);
fork(acquire(cnt); wH(v1,10*rH(v1)); print(rH(v1)); release(cnt);)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
1 -> 1, [], 2
-------------------------------
Current program state: id#29
Execution stack: 
fork(acquire(cnt); wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);); acquire(cnt); print(rH(v1)-1); release(cnt);

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
1 -> 1, [], 2
-------------------------------
Current program state: id#30
Execution stack: 
acquire(cnt); wH(v1,10*rH(v1)); print(rH(v1)); release(cnt);

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
1 -> 1, [], 2
-------------------------------
Current program state: id#29
Execution stack: 
acquire(cnt); print(rH(v1)-1); release(cnt);
fork(acquire(cnt); wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
1 -> 1, [], 2
-------------------------------
Current program state: id#30
Execution stack: 
wH(v1,10*rH(v1)); print(rH(v1)); release(cnt);
acquire(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
1 -> 1, [], 2
-------------------------------
Current program state: id#29
Execution stack: 
acquire(cnt); print(rH(v1)-1); release(cnt);

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
1 -> 1, [30], 2
-------------------------------
Current program state: id#30
Execution stack: 
wH(v1,10*rH(v1)); print(rH(v1)); release(cnt);

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
1 -> 1, [30], 2
-------------------------------
Current program state: id#31
Execution stack: 
acquire(cnt); wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
1 -> 1, [30], 2
-------------------------------
Current program state: id#29
Execution stack: 
print(rH(v1)-1); release(cnt);
acquire(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
1 -> 1, [30], 2
-------------------------------
Current program state: id#30
Execution stack: 
print(rH(v1)); release(cnt);
wH(v1,10*rH(v1))

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
1 -> 1, [30], 2
-------------------------------
Current program state: id#31
Execution stack: 
wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);
acquire(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
1 -> 1, [30], 2
-------------------------------
Current program state: id#29
Execution stack: 
print(rH(v1)-1); release(cnt);
acquire(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [30], 2
-------------------------------
Current program state: id#30
Execution stack: 
print(rH(v1)); release(cnt);

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [30], 2
-------------------------------
Current program state: id#31
Execution stack: 
wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);
acquire(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [30], 2
-------------------------------
Current program state: id#29
Execution stack: 
print(rH(v1)-1); release(cnt);
acquire(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [30], 2
-------------------------------
Current program state: id#30
Execution stack: 
release(cnt)
print(rH(v1))

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [30], 2
-------------------------------
Current program state: id#31
Execution stack: 
wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);
acquire(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [30], 2
-------------------------------
Current program state: id#29
Execution stack: 
print(rH(v1)-1); release(cnt);
acquire(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [30], 2
-------------------------------
Current program state: id#30
Execution stack: 
release(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [30], 2
-------------------------------
Current program state: id#31
Execution stack: 
wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);
acquire(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [30], 2
-------------------------------
Current program state: id#29
Execution stack: 
print(rH(v1)-1); release(cnt);
acquire(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [], 2
-------------------------------
Current program state: id#30
Execution stack: 

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [], 2
-------------------------------
Current program state: id#31
Execution stack: 
wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);
acquire(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [], 2
-------------------------------
Current program state: id#29
Execution stack: 
print(rH(v1)-1); release(cnt);

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [31, 29], 2
-------------------------------
Current program state: id#31
Execution stack: 
wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [31, 29], 2
-------------------------------
Current program state: id#29
Execution stack: 
release(cnt)
print(rH(v1)-1)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [31, 29], 2
-------------------------------
Current program state: id#31
Execution stack: 
wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);
wH(v1,rH(v1)*10)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [31, 29], 2
-------------------------------
Current program state: id#29
Execution stack: 
release(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20
19

File table: 

Heap: 
1 -> 200

Lock table: 

Semaphore table: 
1 -> 1, [31, 29], 2
-------------------------------
Current program state: id#31
Execution stack: 
wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20
19

File table: 

Heap: 
1 -> 200

Lock table: 

Semaphore table: 
1 -> 1, [31, 29], 2
-------------------------------
Current program state: id#29
Execution stack: 

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20
19

File table: 

Heap: 
1 -> 200

Lock table: 

Semaphore table: 
1 -> 1, [31], 2
-------------------------------
Current program state: id#31
Execution stack: 
print(rH(v1)); release(cnt);
wH(v1,rH(v1)*2)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20
19

File table: 

Heap: 
1 -> 200

Lock table: 

Semaphore table: 
1 -> 1, [31], 2
-------------------------------
Current program state: id#31
Execution stack: 
print(rH(v1)); release(cnt);

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20
19

File table: 

Heap: 
1 -> 400

Lock table: 

Semaphore table: 
1 -> 1, [31], 2
-------------------------------
Current program state: id#31
Execution stack: 
release(cnt)
print(rH(v1))

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20
19

File table: 

Heap: 
1 -> 400

Lock table: 

Semaphore table: 
1 -> 1, [31], 2
-------------------------------
Current program state: id#31
Execution stack: 
release(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20
19
400

File table: 

Heap: 
1 -> 400

Lock table: 

Semaphore table: 
1 -> 1, [31], 2
-------------------------------
Current program state: id#31
Execution stack: 

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20
19
400

File table: 

Heap: 
1 -> 400

Lock table: 

Semaphore table: 
1 -> 1, [], 2
-------------------------------
Current program state: id#1
Execution stack: 
Int cnt; new(v1, 2); newSemaphore(cnt, rH(v1), 1); fork(acquire(cnt); wH(v1,10*rH(v1)); print(rH(v1)); release(cnt);); fork(acquire(cnt); wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);); acquire(cnt); print(rH(v1)-1); release(cnt);
Ref(0, Int) v1

Symbol table: 

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#1
Execution stack: 
Int cnt; new(v1, 2); newSemaphore(cnt, rH(v1), 1); fork(acquire(cnt); wH(v1,10*rH(v1)); print(rH(v1)); release(cnt);); fork(acquire(cnt); wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);); acquire(cnt); print(rH(v1)-1); release(cnt);

Symbol table: 
v1 -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#1
Execution stack: 
new(v1, 2); newSemaphore(cnt, rH(v1), 1); fork(acquire(cnt); wH(v1,10*rH(v1)); print(rH(v1)); release(cnt);); fork(acquire(cnt); wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);); acquire(cnt); print(rH(v1)-1); release(cnt);
Int cnt

Symbol table: 
v1 -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#1
Execution stack: 
new(v1, 2); newSemaphore(cnt, rH(v1), 1); fork(acquire(cnt); wH(v1,10*rH(v1)); print(rH(v1)); release(cnt);); fork(acquire(cnt); wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);); acquire(cnt); print(rH(v1)-1); release(cnt);

Symbol table: 
cnt -> 0
v1 -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#1
Execution stack: 
newSemaphore(cnt, rH(v1), 1); fork(acquire(cnt); wH(v1,10*rH(v1)); print(rH(v1)); release(cnt);); fork(acquire(cnt); wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);); acquire(cnt); print(rH(v1)-1); release(cnt);
new(v1, 2)

Symbol table: 
cnt -> 0
v1 -> Int->0

Output: 

File table: 

Heap: 

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#1
Execution stack: 
newSemaphore(cnt, rH(v1), 1); fork(acquire(cnt); wH(v1,10*rH(v1)); print(rH(v1)); release(cnt);); fork(acquire(cnt); wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);); acquire(cnt); print(rH(v1)-1); release(cnt);

Symbol table: 
cnt -> 0
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#1
Execution stack: 
fork(acquire(cnt); wH(v1,10*rH(v1)); print(rH(v1)); release(cnt);); fork(acquire(cnt); wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);); acquire(cnt); print(rH(v1)-1); release(cnt);
newSemaphore(cnt, rH(v1), 1)

Symbol table: 
cnt -> 0
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
-------------------------------
Current program state: id#1
Execution stack: 
fork(acquire(cnt); wH(v1,10*rH(v1)); print(rH(v1)); release(cnt);); fork(acquire(cnt); wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);); acquire(cnt); print(rH(v1)-1); release(cnt);

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
1 -> 1, [], 2
-------------------------------
Current program state: id#1
Execution stack: 
fork(acquire(cnt); wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);); acquire(cnt); print(rH(v1)-1); release(cnt);
fork(acquire(cnt); wH(v1,10*rH(v1)); print(rH(v1)); release(cnt);)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
1 -> 1, [], 2
-------------------------------
Current program state: id#1
Execution stack: 
fork(acquire(cnt); wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);); acquire(cnt); print(rH(v1)-1); release(cnt);

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
1 -> 1, [], 2
-------------------------------
Current program state: id#2
Execution stack: 
acquire(cnt); wH(v1,10*rH(v1)); print(rH(v1)); release(cnt);

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
1 -> 1, [], 2
-------------------------------
Current program state: id#1
Execution stack: 
acquire(cnt); print(rH(v1)-1); release(cnt);
fork(acquire(cnt); wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
1 -> 1, [], 2
-------------------------------
Current program state: id#2
Execution stack: 
wH(v1,10*rH(v1)); print(rH(v1)); release(cnt);
acquire(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
1 -> 1, [], 2
-------------------------------
Current program state: id#1
Execution stack: 
acquire(cnt); print(rH(v1)-1); release(cnt);

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
1 -> 1, [2], 2
-------------------------------
Current program state: id#2
Execution stack: 
wH(v1,10*rH(v1)); print(rH(v1)); release(cnt);

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
1 -> 1, [2], 2
-------------------------------
Current program state: id#3
Execution stack: 
acquire(cnt); wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
1 -> 1, [2], 2
-------------------------------
Current program state: id#1
Execution stack: 
print(rH(v1)-1); release(cnt);
acquire(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
1 -> 1, [2], 2
-------------------------------
Current program state: id#2
Execution stack: 
print(rH(v1)); release(cnt);
wH(v1,10*rH(v1))

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
1 -> 1, [2], 2
-------------------------------
Current program state: id#3
Execution stack: 
wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);
acquire(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 2

Lock table: 

Semaphore table: 
1 -> 1, [2], 2
-------------------------------
Current program state: id#1
Execution stack: 
print(rH(v1)-1); release(cnt);
acquire(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [2], 2
-------------------------------
Current program state: id#2
Execution stack: 
print(rH(v1)); release(cnt);

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [2], 2
-------------------------------
Current program state: id#3
Execution stack: 
wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);
acquire(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [2], 2
-------------------------------
Current program state: id#1
Execution stack: 
print(rH(v1)-1); release(cnt);
acquire(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [2], 2
-------------------------------
Current program state: id#2
Execution stack: 
release(cnt)
print(rH(v1))

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [2], 2
-------------------------------
Current program state: id#3
Execution stack: 
wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);
acquire(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [2], 2
-------------------------------
Current program state: id#1
Execution stack: 
print(rH(v1)-1); release(cnt);
acquire(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [2], 2
-------------------------------
Current program state: id#2
Execution stack: 
release(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [2], 2
-------------------------------
Current program state: id#3
Execution stack: 
wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);
acquire(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [2], 2
-------------------------------
Current program state: id#1
Execution stack: 
print(rH(v1)-1); release(cnt);
acquire(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [], 2
-------------------------------
Current program state: id#2
Execution stack: 

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [], 2
-------------------------------
Current program state: id#3
Execution stack: 
wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);
acquire(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [], 2
-------------------------------
Current program state: id#1
Execution stack: 
print(rH(v1)-1); release(cnt);

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [1], 2
-------------------------------
Current program state: id#3
Execution stack: 
wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);
acquire(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [1], 2
-------------------------------
Current program state: id#1
Execution stack: 
release(cnt)
print(rH(v1)-1)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [1], 2
-------------------------------
Current program state: id#3
Execution stack: 
wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);
acquire(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [1], 2
-------------------------------
Current program state: id#1
Execution stack: 
release(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20
19

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [1], 2
-------------------------------
Current program state: id#3
Execution stack: 
wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);
acquire(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20
19

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [1], 2
-------------------------------
Current program state: id#1
Execution stack: 

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20
19

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [], 2
-------------------------------
Current program state: id#3
Execution stack: 
wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);
acquire(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20
19

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [], 2
-------------------------------
Current program state: id#3
Execution stack: 
wH(v1,rH(v1)*10); wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20
19

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [3], 2
-------------------------------
Current program state: id#3
Execution stack: 
wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);
wH(v1,rH(v1)*10)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20
19

File table: 

Heap: 
1 -> 20

Lock table: 

Semaphore table: 
1 -> 1, [3], 2
-------------------------------
Current program state: id#3
Execution stack: 
wH(v1,rH(v1)*2); print(rH(v1)); release(cnt);

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20
19

File table: 

Heap: 
1 -> 200

Lock table: 

Semaphore table: 
1 -> 1, [3], 2
-------------------------------
Current program state: id#3
Execution stack: 
print(rH(v1)); release(cnt);
wH(v1,rH(v1)*2)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20
19

File table: 

Heap: 
1 -> 200

Lock table: 

Semaphore table: 
1 -> 1, [3], 2
-------------------------------
Current program state: id#3
Execution stack: 
print(rH(v1)); release(cnt);

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20
19

File table: 

Heap: 
1 -> 400

Lock table: 

Semaphore table: 
1 -> 1, [3], 2
-------------------------------
Current program state: id#3
Execution stack: 
release(cnt)
print(rH(v1))

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20
19

File table: 

Heap: 
1 -> 400

Lock table: 

Semaphore table: 
1 -> 1, [3], 2
-------------------------------
Current program state: id#3
Execution stack: 
release(cnt)

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20
19
400

File table: 

Heap: 
1 -> 400

Lock table: 

Semaphore table: 
1 -> 1, [3], 2
-------------------------------
Current program state: id#3
Execution stack: 

Symbol table: 
cnt -> 1
v1 -> Int->1

Output: 
20
19
400

File table: 

Heap: 
1 -> 400

Lock table: 

Semaphore table: 
1 -> 1, [], 2
-------------------------------
